
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMASMENOSleftPORDIVAGREGAR ANOTAR ASIGNAR COMA DIF DIV EVALUAR FIN FINFUNCION FINPROCEDIMIENTO FUNCION HACER ID IGUAL INICIO LBRACKET LIMPIAR LPAREN MAS MAYOR MAYORIG MENOR MENORIG MENOS MIENTRAS MOSTRAR NO NUMERO PASA POR PROBAR PROCEDIMIENTO QUITAR RBRACKET RCE REPORTAR RETORNAR RPAREN SEGURO SI SQLI TEXTO VACIA VULNERABLE XSSprograma : INICIO sentencias FINsentencias : sentencia sentencias\n| sentenciasentencia : ANOTAR ID ASIGNAR expresionsentencia : MOSTRAR expresionexpresion : expresion MAS expresion\n| expresion MENOS expresion\n| expresion POR expresion\n| expresion DIV expresionexpresion : NUMEROexpresion : TEXTOexpresion : IDexpresion : SQLIexpresion : XSSexpresion : RCEexpresion : PROBAR LPAREN expresion COMA expresion COMA expresion RPARENexpresion : REPORTAR LPAREN expresion RPAREN'
    
_lr_action_items = {'INICIO':([0,],[2,]),'$end':([1,7,],[0,-1,]),'ANOTAR':([2,4,10,11,12,13,14,15,16,26,27,28,29,30,34,38,],[5,5,-5,-10,-11,-12,-13,-14,-15,-4,-6,-7,-8,-9,-17,-16,]),'MOSTRAR':([2,4,10,11,12,13,14,15,16,26,27,28,29,30,34,38,],[6,6,-5,-10,-11,-12,-13,-14,-15,-4,-6,-7,-8,-9,-17,-16,]),'FIN':([3,4,8,10,11,12,13,14,15,16,26,27,28,29,30,34,38,],[7,-3,-2,-5,-10,-11,-12,-13,-14,-15,-4,-6,-7,-8,-9,-17,-16,]),'ID':([5,6,19,20,21,22,23,24,25,33,36,],[9,13,13,13,13,13,13,13,13,13,13,]),'NUMERO':([6,19,20,21,22,23,24,25,33,36,],[11,11,11,11,11,11,11,11,11,11,]),'TEXTO':([6,19,20,21,22,23,24,25,33,36,],[12,12,12,12,12,12,12,12,12,12,]),'SQLI':([6,19,20,21,22,23,24,25,33,36,],[14,14,14,14,14,14,14,14,14,14,]),'XSS':([6,19,20,21,22,23,24,25,33,36,],[15,15,15,15,15,15,15,15,15,15,]),'RCE':([6,19,20,21,22,23,24,25,33,36,],[16,16,16,16,16,16,16,16,16,16,]),'PROBAR':([6,19,20,21,22,23,24,25,33,36,],[17,17,17,17,17,17,17,17,17,17,]),'REPORTAR':([6,19,20,21,22,23,24,25,33,36,],[18,18,18,18,18,18,18,18,18,18,]),'ASIGNAR':([9,],[19,]),'MAS':([10,11,12,13,14,15,16,26,27,28,29,30,31,32,34,35,37,38,],[20,-10,-11,-12,-13,-14,-15,20,-6,-7,-8,-9,20,20,-17,20,20,-16,]),'MENOS':([10,11,12,13,14,15,16,26,27,28,29,30,31,32,34,35,37,38,],[21,-10,-11,-12,-13,-14,-15,21,-6,-7,-8,-9,21,21,-17,21,21,-16,]),'POR':([10,11,12,13,14,15,16,26,27,28,29,30,31,32,34,35,37,38,],[22,-10,-11,-12,-13,-14,-15,22,22,22,-8,-9,22,22,-17,22,22,-16,]),'DIV':([10,11,12,13,14,15,16,26,27,28,29,30,31,32,34,35,37,38,],[23,-10,-11,-12,-13,-14,-15,23,23,23,-8,-9,23,23,-17,23,23,-16,]),'COMA':([11,12,13,14,15,16,27,28,29,30,31,34,35,38,],[-10,-11,-12,-13,-14,-15,-6,-7,-8,-9,33,-17,36,-16,]),'RPAREN':([11,12,13,14,15,16,27,28,29,30,32,34,37,38,],[-10,-11,-12,-13,-14,-15,-6,-7,-8,-9,34,-17,38,-16,]),'LPAREN':([17,18,],[24,25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'sentencias':([2,4,],[3,8,]),'sentencia':([2,4,],[4,4,]),'expresion':([6,19,20,21,22,23,24,25,33,36,],[10,26,27,28,29,30,31,32,35,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> INICIO sentencias FIN','programa',3,'p_programa','parser.py',13),
  ('sentencias -> sentencia sentencias','sentencias',2,'p_sentencias','parser.py',17),
  ('sentencias -> sentencia','sentencias',1,'p_sentencias','parser.py',18),
  ('sentencia -> ANOTAR ID ASIGNAR expresion','sentencia',4,'p_sentencia_asignacion','parser.py',25),
  ('sentencia -> MOSTRAR expresion','sentencia',2,'p_sentencia_mostrar','parser.py',29),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_binaria','parser.py',33),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_binaria','parser.py',34),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_binaria','parser.py',35),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_binaria','parser.py',36),
  ('expresion -> NUMERO','expresion',1,'p_expresion_numero','parser.py',40),
  ('expresion -> TEXTO','expresion',1,'p_expresion_texto','parser.py',44),
  ('expresion -> ID','expresion',1,'p_expresion_id','parser.py',48),
  ('expresion -> SQLI','expresion',1,'p_expresion_sqli','parser.py',52),
  ('expresion -> XSS','expresion',1,'p_expresion_xss','parser.py',56),
  ('expresion -> RCE','expresion',1,'p_expresion_rce','parser.py',60),
  ('expresion -> PROBAR LPAREN expresion COMA expresion COMA expresion RPAREN','expresion',8,'p_expresion_probar','parser.py',64),
  ('expresion -> REPORTAR LPAREN expresion RPAREN','expresion',4,'p_expresion_reportar','parser.py',68),
]
